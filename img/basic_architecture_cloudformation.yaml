AWSTemplateFormatVersion: "2010-09-09"
Description: Simple Application Architecture, 2023 EnhancementTraining DataEngineering(VPC,Subnet,IGW,RTB,S3Endpoint, EC2(BastionHost), RDS(PostgreSQL), SECRETSMANAGER, Role(Glue,Stepfunction,EventBrdige))

Parameters:
  PublicAvailabilityZone1:
    Description: AvailabilityZone for Public Subnet 1
    Type: AWS::EC2::AvailabilityZone::Name
    Default: "ap-northeast-2a"
  PublicAvailabilityZone2:
    Description: AvailabilityZone for Public Subnet 2
    Type: AWS::EC2::AvailabilityZone::Name
    Default: "ap-northeast-2c"
  PrivateAvailabilityZone1:
    Description: AvailabilityZone for Private Subnet 1
    Type: AWS::EC2::AvailabilityZone::Name
    Default: "ap-northeast-2a"
  PrivateAvailabilityZone2:
    Description: AvailabilityZone for Private Subnet 2
    Type: AWS::EC2::AvailabilityZone::Name
    Default: "ap-northeast-2c"

  PublicSubnetCidr1:
    Description: Cidr Block for Public Subnet1
    Type: String
    Default: 10.0.0.0/24
    AllowedValues:
      - 10.0.0.0/24
      - 10.0.1.0/24
      - 10.0.2.0/24
  PublicSubnetCidr2:
    Description: Cidr Block for Public Subnet2
    Type: String
    Default: 10.0.10.0/24
    AllowedValues:
      - 10.0.10.0/24
      - 10.0.11.0/24
      - 10.0.12.0/24
  PrivateSubnetCidr1:
    Description: Cidr Block for Private Subnet1
    Type: String
    Default: 10.0.100.0/24
    AllowedValues:
      - 10.0.100.0/24
      - 10.0.101.0/24
      - 10.0.102.0/24
  PrivateSubnetCidr2:
    Description: Cidr Block for Private Subnet2
    Type: String
    Default: 10.0.110.0/24
    AllowedValues:
      - 10.0.110.0/24
      - 10.0.111.0/24
      - 10.0.112.0/24

  MyVPCNamePostfix:
    Description: Postfix of VPC(Explan purpose of this vpc)
    Type: String
    Default: EnhancementDS

  EC2KeyName:
    Description: Name of EC2 Keypair
    Type: AWS::EC2::KeyPair::KeyName
    Default: ma-pipeline-key

  EC2AMI:
    Description: AMI of EC2
    Type: String
    Default: ami-04341a215040f91bb
    AllowedValues:
      - ami-04b3f91ebd5bc4f6d
      - ami-04341a215040f91bb
  
  # RDS Pararmeters
  DBInstanceID:
    Default: DEEnhancementDB
    Description: Database Instance Name
    Type: String
    MinLength: 1
    MaxLength: 64
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter, Contain Only alphanumeric
    
  DBName:
    Default: DEEnhancement
    Description: Database Name
    Type: String
    MinLength: 1
    MaxLength: 64
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter, Contain Only alphanumeric
    
  DBInstanceClass:
    Default: db.t3.large
    Description: DB instance class
    Type: String
    AllowedValues:
      - db.t3.medium
      - db.t3.large
      - db.t3.xlarge
      - db.t3.2xlarge
      
  DBUsername:
    Description: Username for DB Access
    Type: String
    MinLength: 1
    MaxLength: 64
    Default: postgres
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter, Contain Only alphanumeric
  
  # DBPassword:
  #   NoEcho: true
  #   Description: Password for DB Access
  #   Default: mypassword
  #   Type: String
  #   MinLength: 8
  #   MaxLength: 40
  #   AllowedPattern: '[a-zA-Z0-9]*'
  #   ConstraintDescription: Contain Only alphanumeric

  DBAllocatedStorage:
    Default: 50
    Description: Size of Database (GiB)
    Type: Number
    MinValue: 5
    MaxValue: 1024
    ConstraintDescription: between 20 and 65536 GiB

Resources:
  # VPC
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "DE-CF-${MyVPCNamePostfix}-VPC"
  # SUBNET
  ## Public Subnet
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PublicSubnetCidr1
      AvailabilityZone: !Ref PublicAvailabilityZone1
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "DE-CF-${MyVPCNamePostfix}-PublicSubnet1"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PublicSubnetCidr2
      AvailabilityZone: !Ref PublicAvailabilityZone2
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "DE-CF-${MyVPCNamePostfix}-PublicSubnet2"
  
  ## Private Subnet
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PrivateSubnetCidr1
      AvailabilityZone: !Ref PrivateAvailabilityZone1
      Tags:
        - Key: Name
          Value: !Sub "DE-CF-${MyVPCNamePostfix}-PrivateSubnet1"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PrivateSubnetCidr2
      AvailabilityZone: !Ref PrivateAvailabilityZone2
      Tags:
        - Key: Name
          Value: !Sub "DE-CF-${MyVPCNamePostfix}-PrivateSubnet2"
  ## Internet Gateway
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "DE-CF-${MyVPCNamePostfix}-IGW"

  AttachIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId:  !Ref MyVPC

  ## Routetable
  PublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub "DE-CF-${MyVPCNamePostfix}-Public RouteTable"
  
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachIGW
    Properties:
      RouteTableId: !Ref PublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  PublicSubnetRTAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRT
      SubnetId: !Ref PublicSubnet1

  PublicSubnetRTAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRT
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub "DE-CF-${MyVPCNamePostfix}-Private RouteTable1"
  
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub "DE-CF-${MyVPCNamePostfix}-Private RouteTable2"

  PrivateSubnetRTAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1
  
  PrivateSubnetRTAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  # VPC Endpoint
  EndpointS3:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcId: !Ref MyVPC
      RouteTableIds: 
       - !Ref PrivateRouteTable1
       - !Ref PrivateRouteTable2
      ServiceName: 'com.amazonaws.ap-northeast-2.s3'
  
  EndpointSecretsManager:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcId: !Ref MyVPC
      PrivateDnsEnabled: true
      VpcEndpointType: 'Interface'
      SubnetIds: 
       - !Ref PrivateSubnet1
       - !Ref PrivateSubnet2
      ServiceName: 'com.amazonaws.ap-northeast-2.secretsmanager'
      SecurityGroupIds:
       - !Ref SGForPrivate

  # Security Group
  ## Public SG, Bastion Host
  SGForPublic:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Public EC2 SecurityGroup(BastionHost)
      GroupName: !Sub "DE-CF-${MyVPCNamePostfix}-PublicSG"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 211.206.114.80/32
          Description: SSH for HIST Network
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
          Description: Allow ALL Traffic(OB)
      VpcId: !Ref MyVPC
      Tags:
        - Key : Name
          Value : !Sub "DE-CF-${MyVPCNamePostfix}-PublicSG"
  
  ## Private SG, RDS
  SGForPrivate:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Private RDS SecurityGroup
      GroupName: !Sub "DE-CF-${MyVPCNamePostfix}-PrivateSG"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId : !GetAtt SGForPublic.GroupId
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Allow ALL Traffic(OB)
      VpcId: !Ref MyVPC
      Tags:
        - Key : Name
          Value : !Sub "DE-CF-${MyVPCNamePostfix}-PrivateSG"
  
  SGForPrivateInternalNetwork:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: 
      - SGForPrivate
      - SGForPublic
    Properties:
      GroupId: !Ref SGForPrivate
      IpProtocol: tcp
      FromPort : 0
      ToPort : 65535
      SourceSecurityGroupId: !GetAtt SGForPrivate.GroupId
      Description: Internal Network in Private Subnets

  SGForPrivateInternalOutboundNetwork:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: 
      - SGForPrivate
      - SGForPublic
    Properties:
      GroupId: !Ref SGForPrivate
      IpProtocol: tcp
      FromPort : 0
      ToPort : 65535
      SourceSecurityGroupId: !GetAtt SGForPrivate.GroupId
      Description: Internal Network in Private Subnets Outbound

  #EC2(Bastion Host)
  EC2forBastionHost:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref EC2AMI
      KeyName: !Ref EC2KeyName
      AvailabilityZone: !GetAtt PublicSubnet1.AvailabilityZone
      InstanceType: t2.micro
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref SGForPublic
      Tags:
        - Key: Name
          Value: !Sub "DE-CF-${MyVPCNamePostfix}-BastionHost"

  # RDS 
  ## SubnetGroup 생성
  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: SubnetGroup for PostgreSQL RDS, 2023 EnhancementTraining DE
      DBSubnetGroupName: !Sub DESubnetGroup
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  # SecretsManager
  CreateRDSSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Description: Simple secret created by AWS CloudFormation for RDS PostgreSQL
      Name: 'de-enhancement-postgresql-secretsmanager'
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${DBUsername}"}'
        GenerateStringKey: password
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

  ## RDS Instance
  RDSPostgreSQL:
    Type: AWS::RDS::DBInstance
    DependsOn: CreateRDSSecret
    Properties:
      DBInstanceIdentifier: !Ref DBInstanceID
      DBName: !Ref DBName
      DBInstanceClass: !Ref DBInstanceClass
      Engine: postgres
      PubliclyAccessible: false
      MultiAZ: false
      EnablePerformanceInsights: false
      EngineVersion: 15.3
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref CreateRDSSecret, ':SecretString:password}}' ]]
      AllocatedStorage: !Ref DBAllocatedStorage
      DBSubnetGroupName: !Ref RDSSubnetGroup
      VPCSecurityGroups:
        - !Ref SGForPrivate

  AttachSecretsManager:
    Type: 'AWS::SecretsManager::SecretTargetAttachment'
    DependsOn: 
      - CreateRDSSecret
      - RDSPostgreSQL
    Properties:
      SecretId: !Ref CreateRDSSecret
      TargetId: !Ref RDSPostgreSQL
      TargetType: AWS::RDS::DBInstance

  # S3
  DEBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join
        - '' # delimiter
        - - ds-enhancement-
          - !Ref AWS::AccountId

  BucketLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: DE_MyS3ObjectCreator
      Runtime: python3.8
      Handler: index.handler
      Role: !GetAtt CreateBucketMyLambdaRole.Arn
      Code:
        ZipFile: !Sub |
          import boto3

          def handler(event, context):
              #s3 = boto3.resource('s3')
              # Create objects inside the bucket
              #s3.Object('${DEBucket}', 'folder1/file1.txt').put(Body='Content of file1.txt')
              #s3.Object('${DEBucket}', 'folder2/subfolder/file2.txt').put(Body='Content of file2.txt')
              #s3.Object('${DEBucket}', 'folder2/file3.txt').put(Body='Content of file3.txt')
              
              # Create Folder in inside the bucket
              s3 = boto3.client('s3')
              s3.put_object(Bucket='${DEBucket}', Key = 'glue/script/')
              s3.put_object(Bucket='${DEBucket}', Key = 'glue/temp/')
              s3.put_object(Bucket='${DEBucket}', Key = 'glue/logs/')
              s3.put_object(Bucket='${DEBucket}', Key = 'athena_result/')
              s3.put_object(Bucket='${DEBucket}', Key = 'data/demension/')
              s3.put_object(Bucket='${DEBucket}', Key = 'data/fact/')
              s3.put_object(Bucket='${DEBucket}', Key = 'data/fact/bronze/')
              s3.put_object(Bucket='${DEBucket}', Key = 'data/fact/silver/')
              s3.put_object(Bucket='${DEBucket}', Key = 'data/fact/gold/')


  CreateBucketMyLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 'DE-CF-CreateBucket-Role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3ObjectCreatorPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                Resource: !Sub 'arn:aws:s3:::${DEBucket}/*'

  # Glue
  ## Glue Role
  GlueExecuteRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 'DE-CF-GlueExecute-Role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: glue.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite # SecretsManager
        - arn:aws:iam::aws:policy/AmazonS3FullAccess # S3 FullAccess
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole # GlueServiceRole
  
  ## Glue Connection
  GlueConnection:
    Type: AWS::Glue::Connection
    DependsOn: RDSPostgreSQL
    Properties:
      CatalogId: !Ref AWS::AccountId
      ConnectionInput:
        ConnectionType: 'JDBC'
        Description: 'Connection for PostgreSQL RDS in Private Subnet'
        Name: 'DE-CF-GlueConnection'
        ConnectionProperties:
          # Replace the following properties with the actual connection details
          USERNAME: !Ref DBUsername
          PASSWORD: !Join ['', ['{{resolve:secretsmanager:', !Ref CreateRDSSecret, ':SecretString:password}}' ]]
          JDBC_CONNECTION_URL: !Join
            - '' # delimiter
            - - 'jdbc:postgresql://'
              - !GetAtt RDSPostgreSQL.Endpoint.Address
              - ':5432/postgres'
        PhysicalConnectionRequirements: 
          SecurityGroupIdList:
            - !Ref SGForPrivate
          SubnetId: !Ref PrivateSubnet1

  # Athena WorkGroup 
  AthenaWorkGroup:
    Type: AWS::Athena::WorkGroup
    Properties: 
      Description: DE-Enhancement-User-Group
      Name: DE-Enhancement-User-Group
      WorkGroupConfiguration: 
        BytesScannedCutoffPerQuery: 504857600
        PublishCloudWatchMetricsEnabled: true
        ResultConfiguration:
          OutputLocation: !Sub s3://workshop-blee/athena_result/

  # Stepfunction Role
  StepfunctionGlueRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: DE-Enhancement-StepfunctionGlue-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSGlueConsoleFullAccess # AWSGlueConsoleFullAccess
        - arn:aws:iam::aws:policy/CloudWatchFullAccess # CloudWatchFullAccess

  # EventBridge Role(Execute StateMachine)
  EventBridgeStateRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: DE-Enhancement-EventBridgeStepfunction-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess # AWSStepFunctionsFullAccess